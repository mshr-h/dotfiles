scriptencoding utf-8

" automatically download vimproc.dll
let g:vimproc#download_windows_dll = 1

let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_mac = !s:is_windows
      \ && (has('mac') || has('macunix') || has('gui_macvim') ||
      \   (!executable('xdg-open') &&
      \     system('uname') =~? '^darwin'))

" In Windows/Linux, take in a difference of '.vim' and '$VIM/vimfiles'.
let $DOTVIM = expand('$HOME/.vim')
set runtimepath+=$HOME/.vim,$HOME/.vim/after

silent! if plug#begin('~/.plugged')
  if !s:is_windows
    Plug 'Shougo/vimproc.vim', { 'do': 'make' }
  endif

  Plug 'vim-airline/vim-airline'
  Plug 'jmcantrell/vim-virtualenv'

  " Browsing
  Plug 'haya14busa/is.vim'
  Plug 'itchyny/vim-cursorword'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'lambdalisue/fern.vim'
  Plug 'vim-scripts/gtags.vim'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'roxma/nvim-yarp'

  " Git
  Plug 'tpope/vim-fugitive'
  Plug 'mhinz/vim-signify'
  Plug 'lambdalisue/gina.vim'

  " Colors
  Plug 'junegunn/rainbow_parentheses.vim'
  Plug 'ghifarit53/tokyonight-vim'

  " Edit
  Plug 'junegunn/vim-easy-align'
  Plug 'scrooloose/nerdcommenter'
  Plug 'tpope/vim-surround'
  Plug 'osyo-manga/vim-over'
  Plug 'jceb/vim-hier'
  Plug 'KazuakiM/vim-qfstatusline'
  Plug 'w0rp/ale'

  " Lang
  Plug 'fatih/vim-go'
  Plug 'moorereason/vim-markdownfmt'
  Plug 'rhysd/vim-gfm-syntax'
  Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
  Plug 'fisadev/vim-isort'
  Plug 'rhysd/vim-clang-format'
  Plug 'NLKNguyen/c-syntax.vim'
  Plug 'octol/vim-cpp-enhanced-highlight'
  Plug 'chiphogg/vim-prototxt'

  call plug#end()
endif

" ============================================================================
" BASIC SETTINGS
"
silent! colorscheme tokyonight
set background=dark
set autoindent
set smartindent
set breakindent
set lazyredraw
set laststatus=2
set showcmd
set visualbell
set backup
set backupdir=~/var/vim/backup//
set writebackup
set swapfile
set directory=~/var/vim/swap//
set undofile
set undodir=~/var/vim/undo//
set undolevels=1000
set matchpairs+=<:>
set backspace=indent,eol,start
set timeoutlen=500
set whichwrap+=h,l,<,>,[,],b,s,~
set shortmess=aIT
set hlsearch
set incsearch
set hidden
set ignorecase
set smartcase
set wildmenu
set wildmode=full
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set scrolloff=5
set encoding=utf-8
set list
set listchars=tab:>-,trail:-
set virtualedit=block
set nojoinspaces
set autoread
set wrap
set t_vb=
set novisualbell
set history=500
set cmdheight=2
set title
set titlelen=95
set modeline
set t_Co=256
set nf="hex"
set foldlevelstart=99
set completeopt=menuone,preview,longest
set nocursorline
set nrformats=hex
set formatoptions+=1
set completeopt-=preview
set formatoptions+=j
let &showbreak = 'â†³ '
set breakindent
set breakindentopt=sbr
set grepformat=%f:%l:%c:%m,%f:%l:%m
if executable('jvgrep')
  set grepprg=jvgrep
endif
highlight CursorLine ctermfg=216

" ----------------------------------------------------------------------------
" Keymappings
"
" Smart space mapping.
nnoremap <Space>   <Nop>
xnoremap <Space>   <Nop>
" Command-line mode keymappings
" <C-a>, A: move to head.
cnoremap <C-a> <Home>
" <C-b>: previous char.
cnoremap <C-b> <Left>
" <C-d>: delete char.
cnoremap <C-d> <Del>
" <C-e>, E: move to end.
cnoremap <C-e> <End>
" <C-f>: next char.
cnoremap <C-f> <Right>
" <C-n>: next history.
cnoremap <C-n> <Down>
" <C-p>: previous history.
cnoremap <C-p> <Up>
" <C-k>, K: delete to end.
cnoremap <C-k> <C-\>e getcmdpos() == 1 ?
      \ '' : getcmdline()[:getcmdpos()-2]<CR>
" <C-y>: paste.
cnoremap <C-y> <C-r>*
" show the jump list if more then one candidate
nnoremap <C-]> g<C-]>

" gtags
map <C-g> :Gtags 
map <C-h> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>

" Easily edit .vimrc and .gvimrc
nnoremap <silent> <Space>ev  :<C-u>edit $HOME/.dotfiles/vim/vimrc<CR>
nnoremap <silent> <Space>eg  :<C-u>edit $HOME/.dotfiles/vim/gvimrc<CR>

" Change current directory.
nnoremap <silent> <Space>cd :<C-u>CD<CR>
command! -nargs=? -complete=dir -bang CD  call s:ChangeCurrentDir('<args>', '<bang>') 
function! s:ChangeCurrentDir(directory, bang)
  if a:directory == ''
    lcd %:p:h
  else
    execute 'lcd' . a:directory
  endif

  if a:bang == ''
    pwd
  endif
endfunction

" ----------------------------------------------------------------------------
" Encoding
"
set fenc=utf-8
set encoding=utf-8
set fileencodings=iso-2022-jp,ucs-bom,sjis,utf-8,euc-jp,cp932,default,latin1
set fileformats=unix,dos,mac

" ----------------------------------------------------------------------------
" Language
"
" Python
let g:autopep8_disable_show_diff=1
let g:python_highlight_all = 1

" ----------------------------------------------------------------------------
" Autocommands
"
augroup MyAutoCmd
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.s,*.S set filetype=arm
  autocmd FileType c,cpp,objc setl noexpandtab
  autocmd FileType c,cpp,objc setl shiftwidth=4
  autocmd FileType c,cpp,objc setl tabstop=4
  autocmd FileType c,cpp,objc setl listchars=tab:\|\ ,trail:-
  autocmd FileType go setl noexpandtab
  autocmd FileType go setl shiftwidth=4
  autocmd FileType go setl tabstop=4
  autocmd FileType go setl listchars=tab:\|\ ,trail:-
  autocmd FileType json setl conceallevel=0
  autocmd FileType python setl cin
  autocmd FileType python setl expandtab
  autocmd FileType python setl nofoldenable
  autocmd FileType python setl shiftwidth=4
  autocmd FileType python setl tabstop=4
  autocmd FileType verilog setl suffixesadd=.v
  autocmd FileType vim setl foldmethod=marker

augroup END

" ----------------------------------------------------------------------------
" vim-airline
"
let g:airline#extensions#tabline#enabled = 1

" ----------------------------------------------------------------------------
" nerdcommenter
"
let g:NERDSpaceDelims = 1

" ----------------------------------------------------------------------------
" over.vim
"
cnoreabb <silent><expr>s getcmdtype()==':' && getcmdline()=~'^s' ? 'OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>': 's'

" ----------------------------------------------------------------------------
" vim-qfstatusline
"
let g:Qfstatusline#UpdateCmd = function('lightline#update')

" ----------------------------------------------------------------------------
" matchit.vim
"
packadd matchit

" ----------------------------------------------------------------------------
" rainbow_parentheses.vim
"
augroup rainbow
  autocmd!
  autocmd Syntax * RainbowParentheses
augroup END

" ----------------------------------------------------------------------------
" vim-easy-align
"
vmap <Enter> <Plug>(EasyAlign)

" ----------------------------------------------------------------------------
" vim-markdown
"
let g:markdown_fenced_languages = ['c', 'cpp', 'html', 'python', 'bash=sh']

" ----------------------------------------------------------------------------
" fzf
"
nnoremap <silent> <Space>f :<C-u>ProjectFiles<CR>
nnoremap <silent> <Space>b :<C-u>Buffers<CR>
nnoremap <silent> <Space>m :<C-u>History<CR>
function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! ProjectFiles execute 'Files' s:find_git_root()
command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=? -complete=dir Files
      \call fzf#vim#files(<q-args>, {'options': ['--layout=reverse',
      \ --info=inline', '--preview', 'head -20 {}']}, <bang>0)

" ----------------------------------------------------------------------------
" Read local setting.
"
if filereadable(expand('$HOME/.vimrc_local'))
  source $HOME/.vimrc_local
endif

scriptencoding utf-8

" automatically download vimproc.dll
let g:vimproc#download_windows_dll = 1

let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_mac = !s:is_windows && !s:is_cygwin
      \ && (has('mac') || has('macunix') || has('gui_macvim') ||
      \   (!executable('xdg-open') &&
      \     system('uname') =~? '^darwin'))

" Use English interface.
if s:is_windows
  language message en
else
  language message C
endif

" Exchange path separator.
if s:is_windows
  set shellslash
endif

" In Windows/Linux, take in a difference of '.vim' and '$VIM/vimfiles'.
let $DOTVIM = expand('$HOME/.vim')
set runtimepath+=$HOME/.vim,$HOME/.vim/after

silent! if plug#begin('~/.plugged')
  if !s:is_windows
    Plug 'Shougo/vimproc.vim', { 'do': 'make' }
  endif

  Plug 'itchyny/lightline.vim'
  Plug  'tyru/restart.vim'

  " Browsing
  Plug 'Shougo/unite.vim' | Plug 'Shougo/neomru.vim'
  Plug 'Shougo/unite.vim' | Plug 'Shougo/vimshell'
  Plug 'Shougo/unite.vim' | Plug 'Shougo/vimfiler.vim'
  Plug 'haya14busa/incsearch.vim'
  Plug 'itchyny/vim-cursorword'
  if !s:is_windows
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
  endif
  Plug 'Shougo/denite.nvim' | Plug 'Shougo/neoyank.vim'

  " Git
  Plug 'tpope/vim-fugitive'

  " Colors
  Plug 'kien/rainbow_parentheses.vim'
  Plug 'jacoborus/tender'
  Plug 'NLKNguyen/papercolor-theme'

  " Edit
  Plug 'junegunn/vim-easy-align'
  Plug 'scrooloose/nerdcommenter'
  Plug 'tpope/vim-surround'
  Plug 'osyo-manga/vim-over'
  Plug 'jceb/vim-hier'
  Plug 'KazuakiM/vim-qfstatusline'
  Plug 'w0rp/ale'
  Plug 'maralla/completor.vim'

  " Lang
  Plug 'fatih/vim-go'
  Plug 'tpope/vim-markdown'
  Plug 'rhysd/vim-gfm-syntax'
  Plug 'elzr/vim-json'
  Plug 'tell-k/vim-autopep8'
  Plug 'rhysd/vim-clang-format'
  Plug 'NLKNguyen/c-syntax.vim'

  call plug#end()
endif

" ============================================================================
" BASIC SETTINGS
"
colorscheme PaperColor
set background=dark
set autoindent
set smartindent
set breakindent
set lazyredraw
set laststatus=2
set showcmd
set visualbell
set backup
set backupdir=~/var/vim/backup//
set writebackup
set swapfile
set directory=~/var/vim/swap//
set undofile
set undodir=~/var/vim/undo//
set undolevels=1000
set matchpairs+=<:>
set backspace=indent,eol,start
set timeoutlen=500
set whichwrap+=h,l,<,>,[,],b,s,~
set shortmess=aIT
set hlsearch
set incsearch
set hidden
set ignorecase
set smartcase
set wildmenu
set wildmode=full
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set scrolloff=5
set encoding=utf-8
set list
set listchars=tab:>-,trail:-
set virtualedit=block
set nojoinspaces
set autoread
set wrap
set t_vb=
set novisualbell
set history=500
set cmdheight=2
set title
set titlelen=95
set modeline
set t_Co=256
set nf="hex"
set foldlevelstart=99
set completeopt=menuone,preview,longest
set nocursorline
set nrformats=hex
set formatoptions+=1
set completeopt-=preview
set formatoptions+=j
let &showbreak = 'â†³ '
set breakindent
set breakindentopt=sbr
set grepformat=%f:%l:%c:%m,%f:%l:%m
if executable('jvgrep')
  set grepprg=jvgrep
endif
highlight CursorLine ctermfg=216

" ----------------------------------------------------------------------------
" Keymappings
"
" Smart space mapping.
nnoremap <Space>   <Nop>
xnoremap <Space>   <Nop>
" Command-line mode keymappings
" <C-a>, A: move to head.
cnoremap <C-a> <Home>
" <C-b>: previous char.
cnoremap <C-b> <Left>
" <C-d>: delete char.
cnoremap <C-d> <Del>
" <C-e>, E: move to end.
cnoremap <C-e> <End>
" <C-f>: next char.
cnoremap <C-f> <Right>
" <C-n>: next history.
cnoremap <C-n> <Down>
" <C-p>: previous history.
cnoremap <C-p> <Up>
" <C-k>, K: delete to end.
cnoremap <C-k> <C-\>e getcmdpos() == 1 ?
      \ '' : getcmdline()[:getcmdpos()-2]<CR>
" <C-y>: paste.
cnoremap <C-y> <C-r>*

" Easily edit .vimrc and .gvimrc
nnoremap <silent> <Space>ev  :<C-u>edit $HOME/.dotfiles/vim/vimrc<CR>
nnoremap <silent> <Space>eg  :<C-u>edit $HOME/.dotfiles/vim/gvimrc<CR>

" Change current directory.
nnoremap <silent> <Space>cd :<C-u>CD<CR>
command! -nargs=? -complete=dir -bang CD  call s:ChangeCurrentDir('<args>', '<bang>') 
function! s:ChangeCurrentDir(directory, bang)
  if a:directory == ''
    lcd %:p:h
  else
    execute 'lcd' . a:directory
  endif

  if a:bang == ''
    pwd
  endif
endfunction

" ----------------------------------------------------------------------------
" Encoding
"
set encoding=utf-8
" Setting of terminal encoding.
if !has('gui_running')
  if &term ==# 'win32' &&
        \ (v:version < 703 || (v:version == 703 && has('patch814')))
    " Setting when use the non-GUI Japanese console.

    " Garbled unless set this.
    set termencoding=cp932
    " Japanese input changes itself unless set this. Be careful because the
    " automatic recognition of the character code is not possible!
    set encoding=japan
  else
    if $ENV_ACCESS ==# 'linux'
      set termencoding=euc-jp
    elseif $ENV_ACCESS ==# 'colinux'
      set termencoding=utf-8
    else  " fallback
      set termencoding= " same as 'encoding'
    endif
  endif
elseif s:is_windows
  " For system.
  set termencoding=cp932
endif

if !exists('did_encoding_settings') && has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'

  " Does iconv support JIS X 0213?
  if iconv('\x87\x64\x87\x6a', 'cp932', 'euc-jisx0213') ==# '\xad\xc5\xad\xcb'
    let s:enc_euc = 'euc-jisx0213,euc-jp'
    let s:enc_jis = 'iso-2022-jp-3'
  endif

  " Build encodings.
  let &fileencodings = 'ucs-bom'
  if &encoding !=# 'utf-8'
    let &fileencodings = &fileencodings . ',' . 'ucs-2le'
    let &fileencodings = &fileencodings . ',' . 'ucs-2'
  endif
  let &fileencodings = &fileencodings . ',' . s:enc_jis

  if &encoding ==# 'utf-8'
    let &fileencodings = &fileencodings . ',' . s:enc_euc
    let &fileencodings = &fileencodings . ',' . 'cp932'
  elseif &encoding =~# '^euc-\%(jp\|jisx0213\)$'
    let &encoding = s:enc_euc
    let &fileencodings = &fileencodings . ',' . 'utf-8'
    let &fileencodings = &fileencodings . ',' . 'cp932'
  else " cp932
    let &fileencodings = &fileencodings . ',' . 'utf-8'
    let &fileencodings = &fileencodings . ',' . s:enc_euc
  endif
  let &fileencodings = &fileencodings . ',' . &encoding

  unlet s:enc_euc
  unlet s:enc_jis

  let did_encoding_settings = 1
 endif

if has('kaoriya')
  " For Kaoriya only.
  set fileencodings=guess
endif

" Default fileformat.
set fileformat=unix
" Automatic recognition of a new line cord.
set fileformats=unix,dos,mac
" A fullwidth character is displayed in vim properly.
set ambiwidth=double

" Open in UTF-8 again.
command! -bang -bar -complete=file -nargs=? Utf8 edit<bang> ++enc=utf-8 <args>
" Open in iso-2022-jp again.
command! -bang -bar -complete=file -nargs=? Iso2022jp edit<bang> ++enc=iso-2022-jp <args>
" Open in Shift_JIS again.
command! -bang -bar -complete=file -nargs=? Cp932 edit<bang> ++enc=cp932 <args>
" Open in EUC-jp again.
command! -bang -bar -complete=file -nargs=? Euc edit<bang> ++enc=euc-jp <args>
" Open in UTF-16 again.
command! -bang -bar -complete=file -nargs=? Utf16 edit<bang> ++enc=ucs-2le <args>
" Open in UTF-16BE again.
command! -bang -bar -complete=file -nargs=? Utf16be edit<bang> ++enc=ucs-2 <args>

" Aliases.
command! -bang -bar -complete=file -nargs=? Jis Iso2022jp<bang> <args>
command! -bang -bar -complete=file -nargs=? Sjis Cp932<bang> <args>
command! -bang -bar -complete=file -nargs=? Unicode Utf16<bang> <args>

" Tried to make a file note version.
" Don't save it because dangerous.
command! WUtf8 setl fenc=utf-8 command! WIso2022jp setl fenc=iso-2022-jp
command! WCp932 setl fenc=cp932
command! WEuc setl fenc=euc-jp
command! WUtf16 setl fenc=ucs-2le
command! WUtf16be setl fenc=ucs-2
" Aliases.
command! WJis WIso2022jp
command! WSjis WCp932
command! WUnicode WUtf16

if has('multi_byte_ime')
  set iminsert=0 imsearch=0
endif

" ----------------------------------------------------------------------------
" Language
"
" Python
let g:autopep8_disable_show_diff=1
let g:python_highlight_all = 1

" ----------------------------------------------------------------------------
" Autocommands
"
augroup MyAutoCmd
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType c,cpp,objc setl noexpandtab
  autocmd FileType c,cpp,objc setl shiftwidth=4
  autocmd FileType c,cpp,objc setl tabstop=4
  autocmd FileType go setl noexpandtab
  autocmd FileType go setl shiftwidth=4
  autocmd FileType go setl tabstop=4
  autocmd FileType go setl listchars=tab:\|\ ,trail:-
  autocmd FileType haskell setl nofoldenable
  autocmd FileType python setl cin
  autocmd FileType python setl expandtab
  autocmd FileType python setl nofoldenable
  autocmd FileType python setl shiftwidth=4
  autocmd FileType python setl tabstop=4
  autocmd FileType python setl tw=79
  autocmd FileType verilog setl suffixesadd=.v
  autocmd FileType vim setl foldmethod=marker

augroup END

" ----------------------------------------------------------------------------
" vim-plug
"
let g:plug_window='new'

" ----------------------------------------------------------------------------
" vimfiler
"
let g:vimfiler_as_default_explorer = 1

" ----------------------------------------------------------------------------
" incsearch.vim
"
map / <Plug>(incsearch-forward)

" ----------------------------------------------------------------------------
" lightline.vim
"
let g:tender_lightline = 1
let g:lightline = {
      \ 'colorscheme': 'tender',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['fugitive', 'readonly', 'filename']
      \   ],
      \   'right': [
      \     ['lineinfo'],
      \     ['percent'],
      \     [ 'syntaxcheck' ],
      \     ['charcode', 'fileformat', 'fileencoding', 'filetype']
      \   ]
      \ },
      \ 'component_function': {
      \   'fileencoding' : 'LightLineFileencoding',
      \   'fileformat'   : 'LightLineFileformat',
      \   'filename'     : 'LightLineFilename',
      \   'filetype'     : 'LightLineFiletype',
      \   'mode'         : 'LightLineMode',
      \   'modified'     : 'LightLineModified',
      \   'readonly'     : 'LightLineReadonly',
      \   'syntastic'    : 'SyntasticStatuslineFlag',
      \   'fugitive'     : 'LightLineFugitive'
      \ },
      \ 'component_expand': {
      \   'syntaxcheck': 'qfstatusline#Update',
      \ },
      \ 'component_type': {
      \   'syntaxcheck': 'error',
      \ },
      \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'â­¤' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? 'â­  '._ : ''
  endif
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" ----------------------------------------------------------------------------
" Restart.vim
"
let g:restart_sessionoptions = "winsize,winpos"
nnoremap <silent> <Space>re  :<C-u>Restart<CR>

" ----------------------------------------------------------------------------
" nerdcommenter
"
let g:NERDSpaceDelims = 1

" ----------------------------------------------------------------------------
" vim-go
"
let g:go_auto_type_info = 1
let g:go_fmt_command='goimports'
let g:go_fmt_autosave = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go#use_vimproc = 0

" ----------------------------------------------------------------------------
" over.vim
"
let g:over#command_line#search#enable_incsearch = 1
let g:over#command_line#search#enable_move_cursor = 0

cnoreabb <silent><expr>s getcmdtype()==':' && getcmdline()=~'^s' ? 'OverCommandLine<CR><C-u>%s/<C-r>=get([], getchar(0), '')<CR>': 's'

" ----------------------------------------------------------------------------
" vim-qfstatusline
"
let g:Qfstatusline#UpdateCmd = function('lightline#update')

" ----------------------------------------------------------------------------
" matchit.vim
"
runtime macros/matchit.vim

" ----------------------------------------------------------------------------
" rainbow_parentheses.vim
"
let g:rbpt_loadcmd_toggle=1
augroup RainbowParentheses
  autocmd!
  autocmd Syntax * RainbowParenthesesToggleAll
augroup END

" ----------------------------------------------------------------------------
" vim-easy-align
"
vmap <Enter> <Plug>(EasyAlign)

" ----------------------------------------------------------------------------
" denite.nvim
"
" The prefix key.
nnoremap    [denite]   <Nop>
xnoremap    [denite]   <Nop>
nmap    <Space>d [denite]
xmap    <Space>d [denite]
nnoremap <silent> [denite]p :<C-u>Denite neoyank<CR>
nnoremap <silent> [denite]/ :<C-u>Denite line<CR>
nnoremap <silent> [denite]a :<C-u>Denite buffer file_mru file_rec<CR>
" keymapping
call denite#custom#map('insert', "<C-j>", 'move_to_next_line')
call denite#custom#map('insert', "<C-k>", 'move_to_prev_line')
call denite#custom#map('normal', "<C-j>", 'move_to_next_line')
call denite#custom#map('normal', "<C-k>", 'move_to_prev_line')

" custom file_rec command
if executable('files')
  call denite#custom#var('file_rec', 'command', ['files', '-a'])
endif

" ----------------------------------------------------------------------------
" Read local setting.
"
if filereadable(expand('$HOME/.vimrc_local'))
  source $HOME/.vimrc_local
endif


scriptencoding utf-8

let s:jetpackfile = expand('<sfile>:p:h') .. '/pack/jetpack/opt/vim-jetpack/plugin/jetpack.vim'
let s:jetpackurl = "https://raw.githubusercontent.com/tani/vim-jetpack/master/plugin/jetpack.vim"
if !filereadable(s:jetpackfile)
  call system(printf('curl -fsSLo %s --create-dirs %s', s:jetpackfile, s:jetpackurl))
endif

packadd vim-jetpack
call jetpack#begin("~/.plugged")
Jetpack 'tani/vim-jetpack', {'opt': 1}
Jetpack 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Jetpack 'junegunn/fzf.vim'
Jetpack 'ghifarit53/tokyonight-vim'
Jetpack 'vim-airline/vim-airline'
Jetpack 'lambdalisue/gina.vim'
Jetpack 'lambdalisue/fern.vim'
Jetpack 'scrooloose/nerdcommenter'
call jetpack#end()

colorscheme tokyonight

set fenc=utf-8
set encoding=utf-8
set fileencodings=utf-8,sjis,euc-jp,iso-2022-jp,ucs-bom,cp932,default,latin1
set fileformats=unix,dos,mac

filetype plugin on
filetype indent on
au FocusGained,BufEnter * checktime

" :W sudo saves the file
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

set autoindent
set smartindent
set breakindent
set lazyredraw
set laststatus=2
set showcmd
set visualbell
set backup
set backupdir=~/var/vim/backup//
set writebackup
set swapfile
set directory=~/var/vim/swap//
set undofile
set undodir=~/var/vim/undo//
set undolevels=1000
set matchpairs+=<:>
set backspace=indent,eol,start
set timeoutlen=500
set whichwrap+=h,l,<,>,[,],b,s,~
set shortmess=aIT
set hlsearch
set incsearch
set hidden
set ignorecase
set smartcase
set wildmenu
set wildmode=full
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set scrolloff=5
set encoding=utf-8
set list
set listchars=tab:>-,trail:-
set virtualedit=block
set nojoinspaces
set autoread
set wrap
set t_vb=
set novisualbell
set history=500
set cmdheight=2
set title
set titlelen=95
set modeline
set t_Co=256
set nf="hex"
set foldlevelstart=99
set completeopt=menuone,preview,longest
set nocursorline
set nrformats=hex
set formatoptions+=1
set completeopt-=preview
set formatoptions+=j
let &showbreak = 'â†³ '
set breakindent
set breakindentopt=sbr
set grepformat=%f:%l:%c:%m,%f:%l:%m
highlight CursorLine ctermfg=216

" ----------------------------------------------------------------------------
" Keymappings
"
" Smart space mapping.
nnoremap <Space>   <Nop>
xnoremap <Space>   <Nop>
" Command-line mode keymappings
" <C-a>, A: move to head.
cnoremap <C-a> <Home>
" <C-e>, move to end.
cnoremap <C-e> <End>
" <C-b>: previous char.
cnoremap <C-b> <Left>
" <C-f>: next char.
cnoremap <C-f> <Right>
" <C-d>: delete char.
cnoremap <C-d> <Del>
" <C-k>, K: delete to end.
cnoremap <C-k> <C-\>e getcmdpos() == 1 ?
      \ '' : getcmdline()[:getcmdpos()-2]<CR>
" <C-n>: next history.
cnoremap <C-n> <Down>
" <C-p>: previous history.
cnoremap <C-p> <Up>
" <C-y>: paste.
cnoremap <C-y> <C-r>*
" show the jump list if more then one candidate
nnoremap <C-]> g<C-]>
" search for the current selection in visual mode
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>
" gtags
map <C-g> :Gtags 
map <C-h> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>

" Change current directory.
nnoremap <silent> <Space>cd :cd %:p:h<CR>:pwd<CR>

" ----------------------------------------------------------------------------
" Autocommands
"
augroup MyAutoCmd
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.s,*.S set filetype=arm
  autocmd FileType c,cpp,objc setl noexpandtab
  autocmd FileType c,cpp,objc setl shiftwidth=2
  autocmd FileType c,cpp,objc setl tabstop=2
  autocmd FileType c,cpp,objc setl listchars=tab:\|\ ,trail:-
  autocmd FileType go setl noexpandtab
  autocmd FileType go setl shiftwidth=4
  autocmd FileType go setl tabstop=4
  autocmd FileType go setl listchars=tab:\|\ ,trail:-
  autocmd FileType json setl conceallevel=0
  autocmd FileType python setl cin
  autocmd FileType python setl expandtab
  autocmd FileType python setl nofoldenable
  autocmd FileType python setl shiftwidth=2
  autocmd FileType python setl tabstop=2
  autocmd FileType verilog setl suffixesadd=.v
  autocmd FileType vim setl foldmethod=marker

augroup END

" ----------------------------------------------------------------------------
" matchit.vim
"
packadd matchit

" ----------------------------------------------------------------------------
" fzf
"
nnoremap <silent> <Space>f :<C-u>ProjectFiles<CR>
nnoremap <silent> <Space>b :<C-u>Buffers<CR>
nnoremap <silent> <Space>m :<C-u>History<CR>

command! ProjectFiles execute 'Files' s:find_git_root()
command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=? -complete=dir Files
      \call fzf#vim#files(<q-args>, {'options': ['--layout=reverse',
      \ --info=inline', '--preview', 'head -20 {}']}, <bang>0)

" ----------------------------------------------------------------------------
" Helper functions
"
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
